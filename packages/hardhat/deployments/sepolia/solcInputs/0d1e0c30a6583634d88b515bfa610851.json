{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract web3Food {\n\n    address public owner;\n    uint256 public maxFood = 0;\n    uint256 public orderId = 0;\n\n    constructor(address _owner) {\n        // Set the owner of the contract to the address that deployed the contract\n        owner = _owner;\n    }\n\n    event FoodAdded(string name, uint256 price, string description, string image, uint256 foodId);\n    event FoodBought(address indexed buyer, string name, uint256 time, string tableId, uint256 orderId);\n\n    struct food {\n        string name;\n        uint256 price;\n        string description;\n        string image;\n        uint256 foodId;\n    }\n\n    struct order {\n        string name;\n        uint256 price;\n        bool isPrepared;\n        address buyer;\n        string tableId;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only the owner can call this function\");\n        _;\n    }\n\n    food[] private foods; // Mark as private\n    order[] private orders; // Mark as private\n\n    function addFood(string memory _name, uint256 _price, string memory _description, string memory _image) public {\n        food memory newFood = food(_name, _price, _description, _image, maxFood);\n        foods.push(newFood);\n        emit FoodAdded(_name, _price, _description, _image, maxFood);\n        maxFood++;\n    }\n\n    function getFood(uint256 _index) public view returns (food memory) {\n        return foods[_index];\n    }\n\n    function buyFood(uint256 _index, string memory tableId) public payable {\n        require(_index < foods.length, \"Invalid food index\");\n        require(msg.value >= foods[_index].price, \"Insufficient funds\");\n        require(keccak256(abi.encodePacked(tableId)) != keccak256(abi.encodePacked(\"\")), \"Please enter a table!\");\n        order memory newOrder = order(foods[_index].name, foods[_index].price, false, msg.sender, tableId);\n        orders.push(newOrder);\n        emit FoodBought(msg.sender, foods[_index].name, block.timestamp, tableId, orderId);\n        orderId++;\n    }\n\n    function prepareOrder(uint256 _index) public onlyOwner {\n        require(_index < orders.length, \"Invalid order index\");\n        orders[_index].isPrepared = true;\n    }\n\n    function withdraw() public onlyOwner {\n        payable(owner).transfer(address(this).balance);\n    }\n\n    // Function to get all orders\n    function getAllOrders() public view returns (order[] memory) {\n        return orders;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}